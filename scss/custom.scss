// @import "compass/css3";

:root {
    --dark-brown: #2D231E;
    --light-brown: #806D5C;
    --dark-tan: #C4B3A8;
    --light-tan: #DDD0B5;
    
}

* {
    font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
}

body {
    margin: 0;
}

.content {
    display: flex;
    flex-direction: column;
}

.header, .footer {
    display: flex;
    background-color: var(--dark-brown);
    color: var(--light-tan);
    margin: 0;
    padding: 0;
}

.header {
    justify-content: space-between;
}

.nav-left {
    display: flex;
    align-items: center;
}

.nav-icon {
    margin: 0px 16px 0px 16px;
}

.nav-links {
    display: flex;
    align-items: center;
}

.nav-links ul {
    display: flex;
    padding: 8px 16px 8px 8px;
    gap: 16px;
    list-style: none;
}

.nav-links ul li a {
    display: flex;
    font-size: 1.2em;
    color: var(--light-tan);
    align-items: center;
    text-decoration: none;
}

.welcome, .quotes, .call-to-action {
    height: 400px;
}

.welcome {
    display: flex;
    justify-content: space-between;
    background-color: var(--light-brown);
    color: black;
}

#sophisticat {
    height: 400px;
    width: auto;
}

// SPACE SECTION

$spaceHeight: 400px;  // Height of Space Section
$astronarHeight: 300px;  // Height of rocket image


.space {  // Container for entire space section
    height: $spaceHeight;
    background: radial-gradient(ellipse at bottom, #162b43 0%, #000000 100%);
    overflow: hidden;
}

.stars{  // Container for star elements
    height: 100%;
    width: 100%;
    position: relative;
    z-index: 0;
}

// n is number of stars
@function multiple-box-shadow($n) {
    $value: '#{random(4000)}px #{random($spaceHeight)}px #FFF';
    @for $i from 2 through $n {
        $value: '#{$value} , #{random(4000)}px #{random($spaceHeight)}px #FFF';
    }
    @return unquote($value);
} 
  
// Star Density - Far away (small) stars should have larger number than nearby (large) stars
$shadows-small:  multiple-box-shadow(2000);
$shadows-medium: multiple-box-shadow(500);
$shadows-big:    multiple-box-shadow(150);
    
#starsSm {
    width: 1px;
    height: 1px;
    background: transparent;
    box-shadow: $shadows-small;
    animation: animStar 150s linear infinite;
}

#starsSm::after {
    content: " ";
    position: absolute;
    top: 2000px;
    width: 1px;
    height: 1px;
    background: transparent;
    box-shadow: $shadows-small;
}
    
    
#starsMd {
    width: 2px;
    height: 2px;
    background: transparent;
    box-shadow: $shadows-medium;
    animation: animStar 100s linear infinite;
}

#starsMd::after {
    content: " ";
    position: absolute;
    top: 2000px;
    width: 2px;
    height: 2px;
    background: transparent;
    box-shadow: $shadows-medium;
}
    
#starsLg {
    width: 3px;
    height: 3px;
    background: transparent;
    box-shadow: $shadows-big;
    animation: animStar 50s linear infinite;
}

#starsLg::after {
    content: " ";
    position: absolute;
    top: 2000px;
    width: 3px;
    height: 3px;
    background: transparent;
    box-shadow: $shadows-big;
}

    
@keyframes animStar {
    from {
        transform: translateX(0);
    }
        
    to {
        transform: translateX(-2000px);
    }		
}

// Starship

.starship {
    height: 100%;
    width: 100%;
    margin-top: -$spaceHeight;
    text-align: center;
    // overflow: hidden;
}

.astronar {
    height: $astronarHeight;
    width: auto;
    position: relative;
    z-index: 3;
    margin-top: ($spaceHeight - $astronarHeight) / 2;
}

// Starship Thruster

$fireColor: rgb(255,80,0);
$fireColorT: rgba(255,80,0,0);
$dur: 0.25s;
$blur: 0.02em;
$contrast: 5;
$fireRad: 3em;
$parts: 50;
$partSize: 100px; // Vertical size of thruster
$width: 200px; // Horizontal size of thruster


.thruster {
    position: relative;
    left: 50%;
}
.fire {
    position: relative;
    left: -$astronarHeight;
    z-index: 2;
	font-size: 24px;
	-webkit-filter: blur($blur) contrast($contrast);
	width: $width;
	height: $partSize;
    margin-top: -($astronarHeight + $partSize) / 2;
}
.particle {
	animation: thrust $dur ease-in infinite;
	background-image: radial-gradient($fireColor 20%,$fireColorT 70%);
	border-radius: 50%;
	mix-blend-mode: screen;
	opacity: 0;
	position: absolute;
	bottom: 0;
	width: $partSize;
	height: $partSize;
	// spread particles out in time and x-position to get desired effect
	@for $p from 1 through $parts {
		&:nth-of-type(#{$p}) {
			animation-delay: $dur * random();
			left: calc((100% - #{$partSize}) * #{($p - 1)/$parts});
		}
	}
}
@keyframes thrust {
	from {
		opacity: 0;
		transform: translateX(0) scale(1);
	}
	50% {
		opacity: 1;
        transform: translateX(-50%) scale(.4);
	}
	to {
		opacity: 0;
		transform: translateX(-100%) scale(0);
	}
}

.quotes {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--light-tan);
    color: black;
}

.call-to-action {
    background-color: var(--dark-tan);
    color: black;
}

.footer {
    justify-content: center;
    align-items: center;
}